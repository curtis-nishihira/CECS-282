#include <vector>
#include <iostream>
#include <cmath>
#include <chrono>
#include <map> // you will need this for the goldRabbits function
using namespace std;

class BigInt
{
private:
    vector<char> v;
public:
    BigInt();
    BigInt(string s);
    BigInt(int x);
    void print();
    BigInt operator -(int);
    BigInt operator +(BigInt);
    bool operator == (BigInt B);
    bool operator <(const BigInt &B)const;
    bool operator <= (int n);
    bool operator <= (BigInt);
    BigInt operator ++(int);
    friend ostream &operator <<(ostream &out, const BigInt& B);
};

//#include "BigInt.h"
static map<BigInt, BigInt> fibMap;
int goldRabbits(int);
BigInt goldRabbits(BigInt);
void pause() {cout << "Press Enter to continue..."; getchar();}

int main()
{
    
    BigInt B1("123456789123456789123456789123456789");
    BigInt B2(B1);
    BigInt MAX(INT_MAX);
    cout << "B1:"<<B1<<"\nB2:"<<B2<<"\nMAX:"<<MAX<<endl;
    pause();
    cout << "\nB1:";
    B1.print();
    cout << endl;
    pause();

    for(BigInt i=0; i<=3000; i++) // uncomment this
    //for(int i=0; i<=3000; i++) // comment this out
    {
    cout << "\ngoldRabbits("<< i <<") = " << goldRabbits(i);
    }
    pause();

    cout<< "\nThis is the value of goldRabbits(3000)\n\n";
    BigInt gR3000 = goldRabbits(BigInt(3000));
    gR3000.print();

    pause();
    
}

BigInt goldRabbits(BigInt n)
{
    //cout<<"n: "<<n<<" : ";
    static map<BigInt, BigInt> fibMap;
    BigInt zero(0);
    BigInt one(1);
    if(n==zero||n==one)
    {
        BigInt temp(1);
        fibMap[n] = temp;
    }
    else if(!(n==zero&&n==one))
    {
        BigInt temp = fibMap[n-1] + fibMap[n-2];
        fibMap[n] = temp;
    }
    
    map<BigInt, BigInt>::iterator it;
    return fibMap[n];
}

// Modify this function so that it accepts BigInt as input parameter and returns a BigInt
// and uses a map for speed

int goldRabbits(int n)
{
    cout<<"n: "<<n<<" : ";
    static map<int,int>m;
    if(n==1||n==0)
    {
        int temp = 1;
        m[n] = temp;
    }
    else if(n>1)
    {
        int temp = m[n-1] + m[n-2];
        m[n] = temp;
    }
    return m[n];
}


BigInt::BigInt()
{
    v.push_back(0);
}

//implementation of member functions
BigInt::BigInt(int x)
{
    while(x>9)
    {
        int temp = x % 10;
        v.push_back(temp);
        x = x/10;
    }
    v.push_back(x);
}

BigInt::BigInt(string s)
{
    int start = (int)s.length()-1;
    for(int i = start; i>-1;i--)
    {
        v.push_back(s[i]-48);
    }
    
}

void BigInt::print()
{
    vector<char>::reverse_iterator rit;
    for(rit = v.rbegin();rit!=v.rend();rit++)
    {
        cout<<(int)*rit;
    }
    cout<<endl;
}

ostream & operator << (ostream &out, const BigInt &B)
{
    //Idk if we were supposed to do this but thats how your output was
    if(B.v.size()>99)
    {
        out<<to_string(B.v[(int)B.v.size()-1])<<".";
        for(int i = (int)B.v.size()-2; i>=(int)B.v.size()-10;i--)
        {
            out<<to_string(B.v[i]);
        }
        out<<"e";
        out<<to_string(B.v.size());
    }
    else if(B.v.size()>12)
    {
        out<<to_string(B.v[(int)B.v.size()-1])<<".";
        for(int i = (int)B.v.size()-2; i>=(int)B.v.size()-11;i--)
        {
            out<<to_string(B.v[i]);
        }
        //Rounded values
        /*
        for(int i = (int)B.v.size()-2; i>=(int)B.v.size()-10;i--)
        {
            out<<to_string(B.v[i]);
        }
        int temp = B.v[B.v.size()-11]
        if(temp>4)
        {
            int temp=1+temp;
            
        }
        out<<temp;
         */
        out<<"e";
        out<<to_string(B.v.size());
    }
    else{
        for(int i = (int)B.v.size()-1; i>=0;i--)
        {
            out<<to_string(B.v[i]);
        }
    }
    
    return out;
}

BigInt BigInt::operator++(int)
{
    BigInt temp(*this);
    temp = temp + 1;
    v= temp.v;
    return *this;
}

BigInt BigInt::operator-(int n)
{
    BigInt B(n);
    BigInt temp(*this);
    int first = (int)temp.v.size();
    int second = (int)B.v.size();
    
    if(first>second)
    {
        for(int i = 0; i<first-second;i++)
        {
            B.v.push_back(0);
        }
    }
    else if(first<second)
    {
        for(int i = 0; i<second-first;i++)
        {
            B.v.push_back(0);
        }
    }
   
    for(int i = 0; i<B.v.size();i++)
    {
        if(i==B.v.size()-1&&temp.v[i]==0&&B.v[i]==0)
        {
            temp.v.erase(temp.v.end()-1);
            break;
        }
        temp.v[i]-=B.v[i];
        if(temp.v[i]<0)
        {
            temp.v[i]+=10;
            temp.v[i+1]-=1;
        }
    }
    return temp;
}

BigInt BigInt::operator+(BigInt B)
{
    BigInt temp(*this);
    int first = (int)temp.v.size();
    int second = (int)B.v.size();
    if(first>second)
    {
        for(int i = 0; i<first-second;i++)
        {
            B.v.push_back(0);
        }
    }
    else if(first<second)
    {
        for(int i = 0; i<second-first;i++)
        {
            B.v.push_back(0);
        }
    }
    for(int i = 0; i<B.v.size();i++)
    {
        temp.v[i] += B.v[i];
        if(temp.v[i]>9)
        {
            if(i==B.v.size()-1)
            {
                temp.v[i]-=10;
                temp.v.push_back(1);
            }
            else{
                temp.v[i]-=10;
                temp.v[i+1]+=1;
            }
        }
    }
    return temp;
}

bool BigInt::operator<=(int n)
{
    BigInt B(n);
    if(B==*this)
    {
        return true;
    }
    else{
        return *this<B;
    }
}

bool BigInt::operator<=(BigInt B)
{
    if(B==*this)
    {
        return true;
    }
    else{
        return *this<B;
    }
}

bool BigInt::operator==(BigInt B)
{
    int first = (int)v.size();
    int second = (int)B.v.size();
    if(first!=second)
    {
        return false;
    }
    else if(first==second)
    {
        for(int i = first-1; i>=0;i--)
        {
           if(v[i]!=B.v[i])
           {
               return false;
           }
        }
        return true;
    }
    return true;
}

bool BigInt::operator<(const BigInt &B)const
{
    int first = (int)v.size();
    int second = (int)B.v.size();
    BigInt temp = *this;
    if(first<second){return true;}
    else if(first>second){return false;}
    else if(first == second)
    {
        for(int i=(int)temp.v.size()-1;i>=0;i--)
        {
            if(temp.v[i]<B.v[i]){return true;}
            else if(temp.v[i]>B.v[i]){return false;}
        }
    }
    return false;
}


